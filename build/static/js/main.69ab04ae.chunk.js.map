{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"uPAkBe,EAfA,WAEb,OADgBA,IAAMC,IAHR,cAICC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QCA5BK,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,mBACA,iBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCI3BK,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,I,4NCJP,IA4FeC,EA5FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,oBAAU,WACRC,IAEG5B,KAAK,SAAA6B,GACJT,EAASS,MAEb,IAEF,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,OAAO,SAAAvB,GAAI,OAAuB,IAAnBA,EAAKG,YAE1DqB,EAAqB,SAAA3B,GACzB,IAAMG,EAAOW,EAAMc,KAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,IAChC8B,E,qVAAW,IAAQ3B,EAAR,CAAcG,WAAYH,EAAKG,YAEhDiB,EACUvB,EAAI8B,GACXnC,KAAK,SAAAoC,GACJhB,EAASD,EAAMkB,IAAI,SAAA7B,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAO4B,OAEpDE,MAAM,SAAAC,GACLb,EAAgB,QAAD,OACLlB,EAAKK,QADA,yCAGf2B,WAAW,WACTd,EAAgB,OACf,KACHN,EAASD,EAAMY,OAAO,SAAAG,GAAC,OAAIA,EAAE7B,KAAOA,QAmC1C,OACE,6BACE,qCAEA,kBAAC,EAAD,CAAcW,QAASS,IAEvB,6BACE,4BAAQX,QAAS,kBAAMU,GAAYD,KAAnC,QACQA,EAAU,iBAAmB,QAGvC,4BAzCeO,EAAYO,IAAI,SAAA7B,GAAI,OACrC,kBAAC,EAAD,CACEiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNC,iBAAkB,kBAAMuB,EAAmBxB,EAAKH,UAwChD,0BAAMqC,SA/BM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhC,QAASQ,EACTyB,MAAM,IAAIC,MAAOC,cACjBrC,UAAWsC,KAAKC,SAAW,GAC3B7C,GAAIc,EAAMgC,OAAS,GAGrBvB,EACUiB,GACP7C,KAAK,SAAAoC,GACJhB,EAASD,EAAMiC,OAAOhB,IACtBd,EAAW,QAmBX,2BACE+B,MAAOhC,EACPiC,SAvCiB,SAACX,GACxBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB/B,EAAWqB,EAAMc,OAAOJ,UAuCpB,4BAAQK,KAAK,UAAb,W,MCrFRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.69ab04ae.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, \r\n  create, \r\n  update \r\n}","import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important \r\n    ? 'Make Unimportant' \r\n    : 'Make Important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className='error'>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport noteService from './services/notes'\r\nimport Note from './components/Note'\r\nimport Notification from './components/Notification'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]) \r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  },[])\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\r\n\r\n  const toggleImportanceOf = id => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important}\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note ${note.content} was already removed from the server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportanceOf(note.id)}\r\n    />\r\n  )\r\n  \r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage} />\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? 'Only Important' : 'All'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote} \r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App ","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'  // highlight-line\r\nimport './index.css'\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}